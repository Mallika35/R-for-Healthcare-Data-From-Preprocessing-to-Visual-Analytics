{
    "type": [
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2
    ],
    "data": [
        "\nR version 4.0.0 (2020-04-24) -- \"Arbor Day\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin17.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to",
        " cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ───────────────────\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.1     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.4     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.1\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n── \u001B[1mConflicts\u001B[2",
        "2m ────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(plotly)",
        "\nAttaching package: ‘plotly’\n\nThe following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\nThe following object is masked from ‘package:stats’:\n\n    filter\n\nThe following object is masked from ‘package:graphics’:\n\n    layout\n\n",
        "> ",
        "library(htmlwidgets)",
        "> ",
        "library(RColorBrewer)",
        "Warning message:\npackage ‘RColorBrewer’ was built under R version 4.0.5 \n",
        "> ",
        "create_and_save_plots <- function() {",
        "+ ",
        "  # Custom Theme",
        "+ ",
        "  custom_theme <- theme_minimal() + theme(",
        "+ ",
        "    text = element_text(size = 12, family = \"Arial\"),",
        "+ ",
        "    plot.title = element_text(size = 16, face = \"bold\"),",
        "+ ",
        "    axis.text.x = element_text(angle = 45, hjust = 1)",
        "+ ",
        "  )",
        "+ ",
        "  ",
        "+ ",
        "  # Color Palette",
        "+ ",
        "  color_palette <- brewer.pal(9, \"Set1\")",
        "+ ",
        "  ",
        "+ ",
        "  # 1. Top 10 Medical Conditions (Static PNG + Interactive HTML)",
        "+ ",
        "  condition_overall <- data_clean %>%",
        "+ ",
        "    group_by(Medical.Condition) %>%",
        "+ ",
        "    summarise(Total = n(), .groups = 'drop') %>%",
        "+ ",
        "    arrange(desc(Total)) %>%",
        "+ ",
        "    slice(1:10)",
        "+ ",
        "  ",
        "+ ",
        "  p1_static <- ggplot(condition_overall, ",
        "+ ",
        "                      aes(x = reorder(Medical.Condition, -Total), y = Total, ",
        "+ ",
        "                          fill = Medical.Condition)) +",
        "+ ",
        "    geom_bar(stat = \"identity\") +",
        "+ ",
        "    scale_fill_manual(values = color_palette) +",
        "+ ",
        "    labs(title = \"Top 10 Medical Conditions\", x = \"Condition\", y = \"Cases\") +",
        "+ ",
        "    custom_theme",
        "+ ",
        "  ",
        "+ ",
        "  # Save static",
        "+ ",
        "  ggsave(\"top_conditions.png\", p1_static, width = 10, height = 6, dpi = 300)",
        "+ ",
        "  ",
        "+ ",
        "  # Save interactive",
        "+ ",
        "  p1_interactive <- ggplotly(p1_static, tooltip = c(\"x\", \"y\", \"fill\")) %>% ",
        "+ ",
        "    layout(hoverlabel = list(bgcolor = \"white\", font = list(size = 12)))",
        "+ ",
        "  saveWidget(p1_interactive, \"top_conditions.html\")",
        "+ ",
        "  ",
        "+ ",
        "  # 2. Age Group Distribution (Static PNG + Interactive HTML)",
        "+ ",
        "  age_distribution <- data_clean %>%",
        "+ ",
        "    group_by(AgeGroup) %>%",
        "+ ",
        "    summarise(Count = n(), .groups = 'drop')",
        "+ ",
        "  ",
        "+ ",
        "  p2_static <- ggplot(age_distribution, ",
        "+ ",
        "                      aes(x = AgeGroup, y = Count, fill = AgeGroup)) +",
        "+ ",
        "    geom_bar(stat = \"identity\") +",
        "+ ",
        "    scale_fill_manual(values = color_palette) +",
        "+ ",
        "    labs(title = \"Age Group Distribution\", x = \"Age Group\", y = \"Count\") +",
        "+ ",
        "    custom_theme",
        "+ ",
        "  ",
        "+ ",
        "  ggsave(\"age_groups.png\", p2_static, width = 8, height = 6, dpi = 300)",
        "+ ",
        "  ",
        "+ ",
        "  p2_interactive <- ggplotly(p2_static, ",
        "+ ",
        "                             tooltip = c(\"x\", \"y\")) %>%",
        "+ ",
        "    layout(hoverlabel = list(bgcolor = \"white\"))",
        "+ ",
        "  saveWidget(p2_interactive, \"age_groups.html\")",
        "+ ",
        "  ",
        "+ ",
        "  # 3. Hospital-Condition Heatmap (Static PNG + Interactive HTML)",
        "+ ",
        "  condition_hospital <- data_clean %>%",
        "+ ",
        "    group_by(Hospital, Medical.Condition) %>%",
        "+ ",
        "    summarise(Count = n(), .groups = 'drop') %>%",
        "+ ",
        "    filter(Count > 5)",
        "+ ",
        "  ",
        "+ ",
        "  p3_static <- ggplot(condition_hospital, ",
        "+ ",
        "                      aes(x = Hospital, y = Medical.Condition, fill = Count)) +",
        "+ ",
        "    geom_tile() +",
        "+ ",
        "    scale_fill_gradient(low = \"#D3E4CD\", high = \"#344E41\") +",
        "+ ",
        "    labs(title = \"Condition Frequency by Hospital\") +",
        "+ ",
        "    theme(axis.text.x = element_text(angle = 90, hjust = 1))",
        "+ ",
        "  ",
        "+ ",
        "  ggsave(\"hospital_heatmap.png\", p3_static, width = 12, height = 8, dpi = 300)",
        "+ ",
        "  ",
        "+ ",
        "  p3_interactive <- ggplotly(p3_static, ",
        "+ ",
        "                             tooltip = c(\"x\", \"y\", \"fill\")) %>%",
        "+ ",
        "    layout(hoverlabel = list(bgcolor = \"white\"))",
        "+ ",
        "  saveWidget(p3_interactive, \"hospital_heatmap.html\")",
        "+ ",
        "  ",
        "+ ",
        "  # 4. Time Trends (If available)",
        "+ ",
        "  if(\"Date.of.Admission\" %in% colnames(data_clean)) {",
        "+ ",
        "    admission_trend <- data_clean %>%",
        "+ ",
        "      mutate(Date = as.Date(Date.of.Admission)) %>%",
        "+ ",
        "      group_by(Date) %>%",
        "+ ",
        "      summarise(Admissions = n(), .groups = 'drop')",
        "+ ",
        "    ",
        "+ ",
        "    p4_static <- ggplot(admission_trend, aes(x = Date, y = Admissions)) +",
        "+ ",
        "      geom_line(color = \"#1F77B4\") +",
        "+ ",
        "      labs(title = \"Admission Trends\") +",
        "+ ",
        "      custom_theme",
        "+ ",
        "    ",
        "+ ",
        "    ggsave(\"admissions_trend.png\", p4_static, width = 10, height = 6, dpi = 300)",
        "+ ",
        "    ",
        "+ ",
        "    p4_interactive <- ggplotly(p4_static, ",
        "+ ",
        "                               tooltip = c(\"x\", \"y\")) %>%",
        "+ ",
        "      layout(hoverlabel = list(bgcolor = \"white\"))",
        "+ ",
        "    saveWidget(p4_interactive, \"admissions_trend.html\")",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "create_and_save_plots()",
        "Error in group_by(., Medical.Condition) : object 'data_clean' not found\n",
        "> ",
        "# Execute the function",
        "> ",
        "create_and_save_plots()",
        "Error in group_by(., Medical.Condition) : object 'data_clean' not found\n",
        "> ",
        "healthcare_dataset <- read.csv(\"~/Downloads/Data Analysis- R/Data Analysis- R/healthcare_dataset.csv\")",
        "> ",
        "  View(healthcare_dataset)",
        "> ",
        " install.packages(c(\"tidyverse\", \"janitor\", \"lubridate\"))",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "# Load the packages",
        "> ",
        "library(tidyverse)  # For data manipulation and visualization",
        "> ",
        "library(janitor)    # For cleaning column names and data",
        "\nAttaching package: ‘janitor’\n\nThe following objects are masked from ‘package:stats’:\n\n    chisq.test, fisher.test\n\n",
        "> ",
        "library(lubridate)  # For date manipulation",
        "> ",
        "# View the first few rows of the dataset",
        "> ",
        "head(data)",
        "                                                                            \n1 function (..., list = character(), package = NULL, lib.loc = NULL,        \n2     verbose = getOption(\"verbose\"), envir = .GlobalEnv, overwrite = TRUE) \n3 {                                                                         \n4     fileExt <- function(x) {                                              \n5         db <- grepl(\"\\\\\\\\.[^.]+\\\\\\\\.(gz|bz2|xz)$\", x)                     \n6         ans <- sub(\".*\\\\\\\\.\", \"\", x)            ",
        "                          \n\nRestarting R session...\n\n"
    ]
}